@using Newtonsoft.Json
@model IEnumerable<NestLogger.Dtos.ThermostateReading>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<div class="container">
    <div class="row">
        <div class='col-sm-6'>
            <div class="form-group">
                <div class='input-group date' id='datetimepicker1'>
                    <input type='text' class="form-control"/>
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        <div class='col-xs-12'>
            <div id="curve_chart" style="width: 900px; height: 500px"></div>
        </div>
    </div>
</div>

<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.DateTime)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.RoomTemperature)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.TargetTemperature)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.OutsideTemperature)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.DateTime)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.RoomTemperature)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TargetTemperature)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.OutsideTemperature)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new {id = item.Id}) |
                @Html.ActionLink("Details", "Details", new {id = item.Id}) |
                @Html.ActionLink("Delete", "Delete", new {id = item.Id})
            </td>
        </tr>
    }
</table>

@section Scripts{
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        $(function() {
            $('#datetimepicker1').datetimepicker({
                format: 'DD/MM/YYYY',
                defaultDate: new Date(getParameterByName("date"))
            }).on('dp.change', function (e) {
                var url = '@Url.Action("Index", "ThermostateReadings")';
                var parts = e.date._i.split("/");
                url += '?date=' + (e.date._d.getMonth() + 1) + '%2F' + e.date._d.getDate() + '%2F' + e.date._d.getFullYear();
                window.location.href = url;
            });

            function getParameterByName(name, url) {
                if (!url) {
                    url = window.location.href;
                }
                name = name.replace(/[\[\]]/g, "\\$&");
                var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                    results = regex.exec(url);
                if (!results) return null;
                if (!results[2]) return '';
                return decodeURIComponent(results[2].replace(/\+/g, " "));
            }

            google.charts.load('current', { 'packages': ['corechart'] });
            google.charts.setOnLoadCallback(drawChart);

            function drawChart() {

                var modelData = @Html.Raw(JsonConvert.SerializeObject(this.Model));

                var arrayLength = modelData.length;
                var data = new google.visualization.DataTable();
                data.addColumn('string','Time');
                data.addColumn('number', 'Outside');
                data.addColumn('number', 'Room');
                data.addColumn('number', 'Thermostat');
                data.addRows(arrayLength);

                for (var i = 0; i < arrayLength; i++) {
                    var reading = modelData[i];
                    data.setValue(i, 0, reading.DateTime.split('T')[1]);
                    data.setValue(i, 1, reading.OutsideTemperature);
                    data.setValue(i, 2, reading.RoomTemperature);
                    data.setValue(i, 3, reading.TargetTemperature);
                }

                var options = {
                    title: 'Temperatures',
                    curveType: 'function',
                    legend: { position: 'bottom' }
                };

                var chart = new google.visualization.LineChart(document.getElementById('curve_chart'));

                chart.draw(data, options);
            }

        });
    </script>
}